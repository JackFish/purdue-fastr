/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class r_gnur_GNUR */

#ifndef _Included_r_gnur_GNUR
#define _Included_r_gnur_GNUR
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     r_gnur_GNUR
 * Method:    rnorm
 * Signature: (DD)D
 */
JNIEXPORT jdouble JNICALL Java_r_gnur_GNUR_rnorm__DD
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     r_gnur_GNUR
 * Method:    rnorm
 * Signature: ([DIDD)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rnorm___3DIDD
  (JNIEnv *, jclass, jdoubleArray, jint, jdouble, jdouble);

/*
 * Class:     r_gnur_GNUR
 * Method:    rnormNonChecking
 * Signature: ([DIDD)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rnormNonChecking
  (JNIEnv *, jclass, jdoubleArray, jint, jdouble, jdouble);

/*
 * Class:     r_gnur_GNUR
 * Method:    rnormStd
 * Signature: ([DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rnormStd
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rnorm
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rnorm___3DI_3DI_3DI
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    runifStd
 * Signature: ([DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_runifStd
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    runif
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_runif
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rgamma
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rgamma
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rbinom
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rbinom
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rlnormStd
 * Signature: ([DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rlnormStd
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rlnorm
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rlnorm
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rcauchyStd
 * Signature: ([DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rcauchyStd
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    rcauchy
 * Signature: ([DI[DI[DI)Z
 */
JNIEXPORT jboolean JNICALL Java_r_gnur_GNUR_rcauchy
  (JNIEnv *, jclass, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    set_seed
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_set_1seed
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    get_seed
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_get_1seed
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    fft_factor
 * Signature: (I[I[I)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_fft_1factor
  (JNIEnv *, jclass, jint, jintArray, jintArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    fft_work
 * Signature: ([DIIII[D[I)I
 */
JNIEXPORT jint JNICALL Java_r_gnur_GNUR_fft_1work
  (JNIEnv *, jclass, jdoubleArray, jint, jint, jint, jint, jdoubleArray, jintArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    dqrdc2
 * Signature: ([DIIID[I[D[I[D)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_dqrdc2
  (JNIEnv *, jclass, jdoubleArray, jint, jint, jint, jdouble, jintArray, jdoubleArray, jintArray, jdoubleArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    dqrcf
 * Signature: ([DII[D[DI[D[I)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_dqrcf
  (JNIEnv *, jclass, jdoubleArray, jint, jint, jdoubleArray, jdoubleArray, jint, jdoubleArray, jintArray);

/*
 * Class:     r_gnur_GNUR
 * Method:    pow
 * Signature: (DD)D
 */
JNIEXPORT jdouble JNICALL Java_r_gnur_GNUR_pow__DD
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     r_gnur_GNUR
 * Method:    pow
 * Signature: ([D[D[DI)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_pow___3D_3D_3DI
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     r_gnur_GNUR
 * Method:    pow
 * Signature: ([DD[DI)V
 */
JNIEXPORT void JNICALL Java_r_gnur_GNUR_pow___3DD_3DI
  (JNIEnv *, jclass, jdoubleArray, jdouble, jdoubleArray, jint);

#ifdef __cplusplus
}
#endif
#endif
